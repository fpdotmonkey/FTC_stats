//
// desciptive.js
//
// Copyright (c) 2015 Fletcher Porter
//

function formatData(data) {  // [ r1, r2, b1, b2, redScore, blueScore ]
    
}

function makeTeamMapping(data) {
    var mapping = new Array();
    for (i = 0; i < data.length; ++i) {
        var r1 = data[i][0];
        var r2 = data[i][1];
        var b1 = data[i][2];
        var b2 = data[i][3];
        
        if (mapping.indexOf(r1) == -1)
            mapping[mapping.length] = r1;
        if (mapping.indexOf(r2) == -1)
            mapping[mapping.length] = r2;
        if (mapping.indexOf(b1) == -1)
            mapping[mapping.length] = b1;
        if (mapping.indexOf(b2) == -1)
            mapping[mapping.length] = b2;
    }
    return mapping;
}

function makePairingMatrix(data) {
    var map = makeTeamMapping(data);
    var n = map.length;
    var Mat = math.zeros(n, n);

    for (i = 0; i < data.length; ++i) {
        var r1 = data[i][0];
        var r2 = data[i][1];
        var b1 = data[i][2];
        var b2 = data[i][3];
        var r1_i = map.indexOf(r1);
        var r2_i = map.indexOf(r2);
        var b1_i = map.indexOf(b1);
        var b2_i = map.indexOf(b2);
        
        Mat._data[r1_i][r2_i] += 1;
        Mat._data[r2_i][r1_i] += 1;
        Mat._data[b1_i][b2_i] += 1;
        Mat._data[b2_i][b1_i] += 1;

        Mat._data[r1_i][r1_i] += 1;
        Mat._data[r2_i][r2_i] += 1;
        Mat._data[b1_i][b1_i] += 1;
        Mat._data[b2_i][b2_i] += 1;
    }
    return Mat;
}

function scores(data) {
    var map = makeTeamMapping(data);
    var n = map.length;
    var scores = math.zeros(n, 1);

    for (i = 0; i < data.length; ++i) {
        var r1 = data[i][0];
        var r2 = data[i][1];
        var b1 = data[i][2];
        var b2 = data[i][3];
        var r1_i = map.indexOf(r1);
        var r2_i = map.indexOf(r2);
        var b1_i = map.indexOf(b1);
        var b2_i = map.indexOf(b2);

        scores._data[r1_i][0] += data[i][4];  // indexing format due to scores
        scores._data[r2_i][0] += data[i][4];  // being a column vector
        scores._data[b1_i][0] += data[i][5];
        scores._data[b2_i][0] += data[i][5];
    }
    return scores;
}

function opr(data) {
    var opr = math.multiply(math.inv(makePairingMatrix(data)), scores(data));
    return opr;
}

data = [[92, 3595, 8336, 7023, 295, 189],
[577, 1369, 5220, 8337, 213, 93],
[5939, 5501, 4134, 5931, 356, 228],
[8207, 4318, 4112, 4982, 97, 174],
[327, 5069, 8352, 3785, 268, 96],
[5977, 6433, 8360, 4847, 305, 223],
[6100, 5609, 3486, 5421, 223, 281],
[4535, 4029, 4965, 4347, 305, 299],
[6002, 365, 3846, 8356, 208, 181],
[3708, 4150, 6337, 5114, 202, 196],
[4251, 8349, 2753, 8359, 274, 187],
[5414, 7712, 6109, 724, 303, 322],
[6424, 4625, 7591, 4220, 298, 231],
[4140, 6272, 3162, 5140, 237, 283],
[8347, 5035, 4092, 8357, 338, 190],
[4278, 7440, 3550, 6024, 291, 263],
[8360, 4134, 6002, 4982, 33, 174],
[4150, 4847, 1369, 4318, 272, 258],
[4029, 6337, 8337, 365, 324, 40],
[8336, 577, 6109, 3846, 231, 272],
[5501, 6433, 6100, 2753, 353, 282],
[4347, 5220, 8349, 4220, 346, 196],
[4625, 5931, 3708, 8347, 123, 202],
[8356, 7023, 7712, 5939, 200, 275],
[4140, 5114, 3785, 4535, 196, 256],
[5609, 6024, 7591, 327, 87, 143],
[8207, 92, 5414, 8359, 215, 227],
[6272, 5977, 4092, 4278, 187, 229],
[5035, 7440, 3595, 3486, 164, 237],
[724, 5140, 5069, 5421, 339, 247],
[8357, 4965, 8352, 4112, 84, 260],
[4251, 3162, 3550, 6424, 243, 363],
[3846, 4535, 6433, 4150, 202, 299],
[6024, 6337, 7023, 6100, 278, 249],
[4318, 6002, 5414, 4029, 273, 346],
[3785, 8207, 6109, 1369, 201, 115],
[6272, 8349, 5931, 5035, 163, 268],
[7591, 5977, 7712, 8347, 106, 194],
[4347, 4278, 8357, 365, 379, 137],
[5939, 5069, 4965, 8360, 396, 186],
[8337, 4134, 4140, 6424, 99, 315],
[3595, 8359, 4625, 5609, 109, 102],
[8356, 92, 3708, 5140, 251, 214],
[2753, 3550, 5220, 4112, 318, 260],
[5421, 5501, 327, 4092, 272, 129],
[4847, 4220, 4251, 577, 164, 326],
[4982, 3486, 8336, 5114, 255, 178],
[3162, 8352, 724, 7440, 202, 338],
[8337, 6433, 4347, 6002, 236, 177],
[1369, 5977, 8349, 5939, 284, 177],
[8360, 8356, 5609, 5035, 144, 178],
[7023, 3708, 8207, 4134, 414, 65],
[365, 4150, 5414, 4965, 120, 252],
[4220, 8357, 2753, 6024, 179, 356],
[4982, 6100, 3550, 4029, 187, 271],
[4092, 4847, 5140, 3846, 84, 281],
[5220, 4251, 8336, 3785, 321, 214],
[8347, 5114, 3595, 8352, 374, 163],
[4112, 5501, 6424, 6272, 270, 230],
[5421, 4625, 7440, 4318, 208, 296],
[4278, 92, 7712, 577, 177, 176],
[4535, 8359, 5931, 7591, 189, 316],
[6109, 3486, 5069, 3162, 293, 333],
[6337, 327, 4140, 724, 314, 301],
[7023, 4347, 3550, 5977, 373, 194],
[4150, 6100, 8347, 8360, 197, 196],
[4112, 8336, 5140, 5035, 124, 232],
[3595, 4092, 8349, 8356, 175, 207],
[92, 7440, 6002, 4251, 307, 348],
[3785, 4625, 6433, 5939, 265, 271],
[365, 5114, 6024, 577, 199, 237],
[1369, 3708, 6424, 4535, 307, 318],
[3846, 8357, 8207, 327, 268, 97],
[5069, 4318, 6272, 7591, 349, 191],
[724, 4847, 4278, 3486, 231, 279],
[6337, 8359, 4134, 5421, 201, 226],
[5220, 5609, 5931, 6109, 216, 164],
[4965, 2753, 4982, 8337, 333, 171],
[7712, 4220, 4029, 3162, 320, 311],
[5414, 4140, 5501, 8352, 210, 114],
[4112, 5114, 7440, 8349, 228, 72],
[6002, 7591, 6100, 4092, 220, 81],
[8347, 8207, 4347, 4251, 267, 432],
[7023, 3785, 365, 5421, 332, 246],
[3595, 5931, 327, 3550, 196, 246],
[4134, 5069, 5609, 1369, 257, 238],
[5140, 4278, 4982, 6109, 257, 271],
[4150, 6424, 8357, 5977, 216, 89],
[8359, 8336, 5501, 4847, 165, 311],
[4140, 577, 4029, 2753, 373, 384],
[4318, 8360, 3162, 8337, 329, 130],
[5220, 3486, 8352, 7712, 325, 235],
[6024, 4965, 8356, 4625, 232, 109],
[5939, 4535, 92, 6272, 371, 370],
[724, 3708, 4220, 6433, 293, 207],
[3846, 5414, 5035, 6337, 339, 372],
[5931, 6424, 5069, 5114, 278, 352],
[6109, 4029, 5977, 4134, 116, 126],
[5501, 8337, 4278, 8207, 187, 173],
[7712, 4347, 8359, 7440, 242, 179],
[3550, 8349, 8347, 4965, 202, 270],
[5140, 6002, 8357, 3785, 152, 193],
[4847, 7591, 5220, 7023, 318, 312],
[5609, 3846, 4112, 4140, 327, 257],
[4625, 5035, 92, 4150, 320, 224],
[5939, 4092, 8336, 4318, 269, 192],
[724, 4982, 3595, 4535, 308, 108],
[2753, 8360, 327, 365, 330, 296],
[5414, 3708, 3162, 577, 312, 282],
[4220, 8356, 6100, 8352, 201, 122],
[6433, 5421, 1369, 6024, 367, 235],
[4251, 6272, 3486, 6337, 384, 238],
[5140, 4029, 8347, 5609, 228, 269],
[5931, 4140, 7712, 4965, 205, 172],
[7440, 4092, 4982, 5069, 160, 310],
[327, 4535, 4278, 8349, 284, 179],
[8360, 6109, 7023, 4625, 263, 266],
[4134, 3162, 4847, 2753, 139, 450],
[1369, 8336, 5414, 8356, 223, 181],
[6424, 577, 5421, 8207, 405, 161],
[4220, 4112, 6002, 4150, 244, 200],
[5114, 6433, 5220, 8359, 212, 208],
[4347, 7591, 6337, 3785, 277, 314],
[8357, 724, 5501, 92, 267, 258],
[6024, 3595, 4251, 4318, 215, 374],
[8352, 3846, 3708, 6272, 87, 279],
[6100, 8337, 5035, 5977, 189, 307],
[365, 3550, 5939, 3486, 262, 347],
[8336, 8360, 8207, 4535, 133, 274],
[4982, 5421, 4140, 4847, 215, 235],
[8349, 5414, 5069, 6433, 49, 480],
[3785, 3162, 4150, 5609, 209, 253],
[6337, 4112, 4092, 5931, 302, 289],
[4029, 6272, 8359, 1369, 270, 238],
[2753, 6002, 4625, 5114, 289, 247],
[6100, 3846, 4347, 3595, 267, 301],
[3486, 8337, 92, 4220, 174, 260],
[3708, 365, 4251, 5501, 208, 302],
[4134, 577, 7591, 724, 209, 209],
[8352, 5035, 4278, 7023, 268, 311],
[8347, 7440, 6109, 8356, 391, 174],
[4965, 327, 5140, 5977, 254, 322],
[7712, 3550, 4318, 8357, 184, 222],
[5939, 5220, 6024, 6424, 296, 160]]


console.log(opr(data));
console.log(makeTeamMapping(data));
